The program must accept a string S with spaces as the input. The program must convert all the alphabets between each pair of square brackets [] to upper case alphabets. 
Finally, the program must print the modified string S as the output.

Boundary Condition(s): 3<= Length of 5 <= 1000

Input Format:

The first line contains S.

Output Format:

The first line contains the modified string S.

Example Input/Output 1:

Input:
uhuu [ntu e]tuhnt[uheo

Output:
uhuu [NTU E]tuhnt[uheo

Explanation:
In the string uhuu [ntu etuhntuheo, the alphabets within the pair of square brackets are n t u e.

After coverting those alphabets into uppercase the string becomes uhuu [NTU Etuhnt[uheo.
Hence the output is uhuu [NTU E]tuhnt[uheo

Example Input/Output 2:

Input:
[robert [was] a good [king]

Output
[robert [WAS] a good [KING]

Example Input/Output 3:

Input
[as[df]er]

Output:
[as[DF]er]

Program:

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int isChar(char c)
{
    if((c>='a' && c<='z') || (c>='A' && c<='Z') || (c==' '))
    {
        return 1;
    }
        return 0;
}
int main()
{
    char s[1080];
    scanf("%[^\n]",s);
    int a[108];
    int j=0;
    for(int i=0;i<strlen(s);i++)
    {
        if(!isChar(s[i]))
        {
            a[j]=i; 
            j++;
        }
    }   
    for(int i=0;i<j;i++)
    {
        if(s[a[i]]=='[' && s[a[i+1]]==']')
        {
            int t=a[i]+1;
            int p=a[i+1]; 
            for (int k=t;k<p;k++)
            {
                s[k]=toupper(s[k]);
            }
        }
    }
    printf("%s",s);

}

